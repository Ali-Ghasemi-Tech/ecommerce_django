Whether a user stays logged in across pages depends on **how you handle the JWT token on the client side** and **whether your frontend persists the token between page reloads/navigation**. Here's a breakdown:

---

### **1. For Admins (Session Authentication)**
- **Behavior**: Admins using Django REST framework’s default `/api-auth/login/` (session-based auth) **will stay logged in** across pages in the browsable API.
- **Why?**: The session ID is stored in a cookie, which the browser automatically sends with every request.
- **Limitation**: Only works within the browsable API or pages that honor Django’s session cookies.

---

### **2. For Members (JWT Authentication)**
Members using JWT tokens **do not automatically stay logged in** across pages unless you:
- **Store the JWT token** (e.g., in `localStorage`, `sessionStorage`, or cookies).
- **Include the token** in the `Authorization` header for every subsequent request.

---

### **How to Persist JWT Login Across Pages**

#### **Step 1: Store the Token Client-Side**
After a successful login, save the JWT token in the client’s storage:
```javascript
// Example: Frontend (React/JavaScript)
fetch('/api/member/login/', {
  method: 'POST',
  body: JSON.stringify({ username: 'user', password: 'pass' }),
})
.then(response => response.json())
.then(data => {
  localStorage.setItem('access_token', data.access);  // Save to localStorage
  localStorage.setItem('refresh_token', data.refresh);
});
```

#### **Step 2: Attach the Token to Every Request**
Include the token in the `Authorization` header for API calls:
```javascript
// Example: Frontend request
fetch('/api/protected/', {
  headers: {
    'Authorization': `Bearer ${localStorage.getItem('access_token')}`,
  },
});
```

#### **Step 3: Handle Token Expiry/Refresh**
- Use the `refresh_token` to get a new `access_token` when it expires.
- Example flow:
  ```javascript
  fetch('/api/refresh/', {
    method: 'POST',
    body: JSON.stringify({ refresh: localStorage.getItem('refresh_token') }),
  })
  .then(response => response.json())
  .then(data => {
    localStorage.setItem('access_token', data.access); // Update access token
  });
  ```

---

### **3. Full-Page Reloads**
- If the user reloads the page or navigates to a new page, the **JWT token must be re-sent** in the headers.
- **Solutions**:
  1. **Store tokens in `localStorage`/`sessionStorage`** (persists across reloads but not across tabs).
  2. **Use cookies** (ensure they are `HttpOnly` and `Secure` for security).

---

### **4. Security Considerations**
- **Never store tokens in plaintext** or expose them in URLs.
- **Use HTTPS** to encrypt tokens in transit.
- **Set short expiration times** for `access_token` (e.g., 15–30 minutes).

---

### **5. Example Flow for Staying Logged In**
1. **User logs in** → JWT tokens are saved in `localStorage`.
2. **User navigates to another page** → The frontend checks `localStorage` for a token.
3. **Frontend includes the token** in all API requests.
4. **Token expires** → Frontend uses the `refresh_token` to get a new `access_token`.

---

### **6. Testing in the Browsable API**
- The Django REST Framework’s browsable API **does not automatically include JWT tokens** in headers.
- To test JWT in the browser, use tools like **Postman** or modify headers manually:
  ```javascript
  // Example: Add a global header in your frontend
  axios.defaults.headers.common['Authorization'] = `Bearer ${localStorage.getItem('access_token')}`;
  ```

---

### **Key Takeaways**
- **Admins (session auth)**: Stay logged in via cookies automatically.
- **Members (JWT)**: Require explicit token storage and header inclusion.
- **Token persistence**: Use `localStorage`, `sessionStorage`, or cookies (with security settings).

By implementing this, your users (both admins and members) can navigate across pages while staying authenticated.