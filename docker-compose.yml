services:
  web:
    build: .
    command: >
      sh -c "
      ./wait-for-it.sh db:5432 -- echo 'Database is ready' &&
      ./wait-for-it.sh redis:6379 -- echo 'Redis is ready' &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - .env
    restart: always

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    restart: always

  celery:
    build: .
    command: >
      sh -c "
      ./wait-for-it.sh redis:6379 -- echo 'Redis is ready' &&
      celery -A config worker --loglevel=info"
    depends_on:
      - redis
      - web
    env_file:
      - .env
    restart: always

  celery-beat:
    build: .
    command: >
      sh -c "
      ./wait-for-it.sh redis:6379 -- echo 'Redis is ready' &&
      celery -A config beat --loglevel=info"
    depends_on:
      - redis
      - web
      - celery
    env_file:
      - .env
    restart: always

volumes:
  postgres_data:

# DD
# version: '3.8'

# services:
#   redis:
#     image: redis:alpine
#     restart: always
#     ports:
#       - "6379:6379"

#   web:
#     build: .
#     command: gunicorn myproject.wsgi:application --bind 0.0.0.0:8000
#     volumes:
#       - .:/app
#     ports:
#       - "8000:8000"
#     depends_on:
#       - redis
#     environment:
#       - REDIS_HOST=redis
#       - REDIS_PORT=6379

#   celery:
#     build: .
#     command: celery -A myproject worker --loglevel=info
#     depends_on:
#       - redis
#       - web
#     environment:
#       - CELERY_BROKER_URL=redis://redis:6379/0


#   celery-beat:
# می‌توانید برای اطمینان از آماده بودن Redis قبل از اجرا شدن Celery، از healthcheck استفاده کنید:

# yaml
# Copy
# Edit
#   redis:
#     image: redis:alpine
#     restart: always
#     ports:
#       - "6379:6379"
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       retries: 5
#       start_period: 5s
# این باعث می‌شود که داکر صبر کند تا Redis آماده شود، سپس Celery و Web را اجرا کند.
